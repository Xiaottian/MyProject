<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
	<resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<resultMap id="userRoleMap" extends="userMap" type="SysUser">
		<!--role相关属性
		<result property="role.id" column="role_id"/>
		<result property="role.roleName" column="role_name"/>
		<result property="role.enabled" column="enabled"/>
		<result property="role.createBy" column="create_by"/>
		<result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>-->
		<association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
	</resultMap>

	<resultMap id="userRoleMapSelect" type="SysUser" extends="userMap">
		<association property="role"
					 fetchType="lazy"
					 column="{id=role_id}"
					 select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
	</resultMap>

	<resultMap id="userRoleListMap" type="SysUser" extends="userMap">
		<collection property="roleList" columnPrefix="role_"
					resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap">
		</collection>
	</resultMap>

	<insert id="insert">
		INSERT INTO sys_user(
			id, user_name, user_password, user_email, user_info, head_img, create_time
		) VALUES (
			#{id},#{userName},#{userPassword},#{userEmail},
			#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
	</insert>

	<!--将useGeneratedKeys设置为true后，mybatis会使用jdbc的getGeneratedKeys方法来读取数据库内部
	生成的主键，获得主键值后将其赋给keyProperty配置的id属性。需要设置多个属性时，
	使用逗号隔开。通常还需要设置keyColumn属性，按顺序指定数据库的列。
	-->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO sys_user(
		user_name, user_password,
		<if test="userEmail != null and userEmail != ''">
			user_email,
		</if>
		user_info, head_img, create_time
		) VALUES (
		#{userName},#{userPassword},
		<if test="userEmail != null and userEmail != ''">
			#{userEmail},
		</if>
		#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
	</insert>

	<!--selectKey 标签 的 keyColumn 、 keyProperty 和上面 useGeneratedKeys 的用法含
	义相同 ，这里的 resultType 用于设置返回值类型 。 order 属性的设置和使用的数据库有关 。
	在 MySQL 数据库中， order 属性设置的值是 AFTER，因为当前记录的主键值在 insert 语句
	执行成功后才能获取到 。 而在 Oracle 数据库中， order 的值要设置为 BEFORE ，这是因为 Oracle
	中需要先从序列获取值，然后将值作为主键插入到数据库中 。-->
	<insert id="insert3">
		INSERT INTO sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time
		) VALUES (
		#{userName},#{userPassword},#{userEmail},
		#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<insert id="insertList" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time
		) VALUES
		<foreach collection="list" item="user" separator=",">
			(#{user.userName},#{user.userPassword},#{user.userEmail},
			#{user.userInfo},#{user.headImg,jdbcType=BLOB},#{user.createTime,jdbcType=TIMESTAMP})
		</foreach>
	</insert>


	<update id="updateById">
		UPDATE sys_user
		SET user_name = #{userName},
			user_password = #{userPassword},
			user_info = #{userInfo},
			head_img = #{headImg,jdbcType=BLOB},
			create_time = #{createTime,jdbcType=TIMESTAMP}
		WHERE id = #{id}
	</update>

	<update id="updateByIdSelective">
		UPDATE sys_user
		<set>
			<if test="userName != null and userName != ''">
				user_name = #{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
				user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
				user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
				user_info = #{userInfo},
			</if>
			<if test="headImg != null ">
				head_img = #{headImg,jdbcType=BLOB},
			</if>
			<if test="createTime != null ">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			id = #{id}
		</set>
		where id = #{id}
	</update>

	<update id="updateByMap">
		UPDATE sys_user
		SET
		<foreach collection="_parameter" item="val" index="key" separator=",">
			${key} = #{val}
		</foreach>
		where id = #{id}
	</update>

	<delete id="deleteById">
		DELETE FROM sys_user WHERE id = #{id}
	</delete>

	<select id="selectById" resultMap="userMap">
		SELECT * FROM sys_user WHERE id = #{id}
	</select>

	<select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
		SELECT id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		FROM sys_user
	</select>

	<!--虽然查询多个表，但是返回的结果只有sys_role表中的信息，所以直接使用SysRole作为返回类型值即可-->
	<select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
		SELECT
			r.id,r.role_name,r.enabled,r.create_by,r.create_time,
			u.user_name AS "user.userName",
			u.user_email AS "user.userEmail"
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role r ON ur.role_id = r.id
		WHERE u.id = #{userId}
	</select>

	<select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
		SELECT
			r.id,r.role_name,r.enabled,r.create_by,r.create_time
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role r ON ur.role_id = r.id
		WHERE u.id = #{user.id} and r.enabled = #{role.enabled}
	</select>

	<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		SELECT id,user_name,user_password,user_email,user_info,head_img,create_time
		FROM sys_user
		<where>
			<if test="userName != null and userName != ''">
				/*AND user_name LIKE concat('%',#{userName},'%')*/
				/*使用bind标签*/
				<bind name="userNameLike" value="'%' + userName + '%'"/>
				AND user_name like #{userNameLike}
			</if>
			<if test="userEmail != null and userEmail != ''">
				AND user_email = #{userEmail}
			</if>
		</where>
	</select>

	<select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
		SELECT id,
		user_name,
		user_password,
		user_email,
		user_info,
		head_img,
		create_time
		FROM sys_user
		WHERE 1=1
		<choose>
			<when test="id != null">
				AND id = #{id}
			</when>
			<when test="userName != null and userName != ''">
				and user_name = #{userName}
			</when>
			<otherwise>
				and 1 = 2
			</otherwise>
		</choose>
	</select>

	<select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
		SELECT id,
		user_name,
		user_password,
		user_email,
		user_info,
		head_img,
		create_time
		FROM sys_user
		WHERE id IN
		<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
			#{id}
		</foreach>
	</select>

	<select id="selectUserAndRoleById" resultType="SysUser">
		SELECT
			u.id,u.user_name,u.user_password,u.user_email,u.user_info,u.head_img,u.create_time,
			r.id "role.id",r.role_name "role.roleName",r.enabled "role.enabled",r.create_by "role.createBy",r.create_time "role.createTime"
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role r ON ur.role_id = r.id
		WHERE u.id = #{id}
	</select>

	<select id="selectUserAndRoleById2" resultMap="userRoleMap">
		SELECT
		u.id,u.user_name,u.user_password,u.user_email,u.user_info,u.head_img,u.create_time,
		r.id,r.role_name,r.enabled,r.create_by,r.create_time role_create_time
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role r ON ur.role_id = r.id
		WHERE u.id = #{id}
	</select>

	<select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
		SELECT
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			ur.role_id
		FROM sys_user u
		INNER JOIN sys_user_role ur ON  u.id = ur.user_id
		WHERE u.id = #{id}
	</select>

	<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
		SELECT
		u.id,u.user_name,u.user_password,u.user_email,u.user_info,u.head_img,u.create_time,
		r.id role_id,r.role_name role_role_name,r.enabled role_role_enabled,r.create_by role_create_by,r.create_time role_create_time,
		p.id role_privilege_id,p.privilege_name role_privilege_privilege_name,
		p.privilege_url role_privilege_privilege_url
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role r ON ur.role_id = r.id
		INNER JOIN sys_role_privilege rp ON rp.role_id = r.id
		INNER JOIN sys_privilege p ON p.id = rp.privilege_id
	</select>


	<!--调用存储过程-->
	<select id="selectUserById" statementType="CALLABLE" useCache="false">
		{call select_user_by_id(
			#{id,mode=IN},
			#{userName,mode=OUT,jdbcType=VARCHAR},
			#{userPassword,mode=OUT,jdbcType=VARCHAR},
			#{userEmail,mode=OUT,jdbcType=VARCHAR},
			#{userInfo,mode=OUT,jdbcType=VARCHAR},
			#{headImg,mode=OUT,jdbcType=BLOB,javaType=_byte[]},
			#{createTime,mode=OUT,jdbcType=TIMESTAMP}
		)}
	</select>

	<select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
		{call select_user_page(
			#{userName,mode=IN},
			#{offset,mode=IN},
			#{limit,mode=IN},
			#{total,mode=OUT,jdbcType=BIGINT}
		)}
	</select>

	<insert id="insertUserAndRoles" statementType="CALLABLE">
		{call insert_user_and_roles(
			#{user.id,mode=OUT,jdbcType=BIGINT},
			#{user.userName,mode=IN},
			#{user.userPassword,mode=IN},
			#{user.userEmail,mode=IN},
			#{user.userInfo,mode=IN},
			#{user.headImg,mode=IN,jdbcType=BLOB},
			#{user.createTime,mode=OUT,jdbcType=TIMESTAMP},
			#{roleIds,mode=IN}
		)}
	</insert>

	<delete id="deleteUserById" statementType="CALLABLE">
		{call delete_user_by_id(#{id,mode=IN})}
	</delete>
</mapper>